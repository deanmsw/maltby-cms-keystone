# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
}

type Team {
  id: ID!
  name: String
  players(where: PlayerWhereInput! = {}, orderBy: [PlayerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlayerWhereUniqueInput): [Player!]
  playersCount(where: PlayerWhereInput! = {}): Int
  league: String
}

input TeamWhereUniqueInput {
  id: ID
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
  name: StringFilter
  players: PlayerManyRelationFilter
  league: StringFilter
}

input PlayerManyRelationFilter {
  every: PlayerWhereInput
  some: PlayerWhereInput
  none: PlayerWhereInput
}

input TeamOrderByInput {
  id: OrderDirection
  name: OrderDirection
  league: OrderDirection
}

input TeamUpdateInput {
  name: String
  players: PlayerRelateToManyForUpdateInput
  league: String
}

input PlayerRelateToManyForUpdateInput {
  disconnect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  create: [PlayerCreateInput!]
  connect: [PlayerWhereUniqueInput!]
}

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  name: String
  players: PlayerRelateToManyForCreateInput
  league: String
}

input PlayerRelateToManyForCreateInput {
  create: [PlayerCreateInput!]
  connect: [PlayerWhereUniqueInput!]
}

type Player {
  id: ID!
  name: String
  email: String
  position: String
  age: String
  previousClub: String
  team: Team
}

input PlayerWhereUniqueInput {
  id: ID
  email: String
}

input PlayerWhereInput {
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  position: StringFilter
  age: StringFilter
  previousClub: StringFilter
  team: TeamWhereInput
}

input PlayerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  position: OrderDirection
  age: OrderDirection
  previousClub: OrderDirection
}

input PlayerUpdateInput {
  name: String
  email: String
  position: String
  age: String
  previousClub: String
  team: TeamRelateToOneForUpdateInput
}

input TeamRelateToOneForUpdateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
}

input PlayerUpdateArgs {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateInput!
}

input PlayerCreateInput {
  name: String
  email: String
  position: String
  age: String
  previousClub: String
  team: TeamRelateToOneForCreateInput
}

input TeamRelateToOneForCreateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

type Page {
  id: ID!
  name: String
  slug: String
  metaTitle: String
  metaDescription: String
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  metaTitle: StringFilter
  metaDescription: StringFilter
}

input PageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  metaTitle: OrderDirection
  metaDescription: OrderDirection
}

input PageUpdateInput {
  name: String
  slug: String
  metaTitle: String
  metaDescription: String
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  name: String
  slug: String
  metaTitle: String
  metaDescription: String
}

type Sponsor {
  id: ID!
  title: String
  link: String
}

input SponsorWhereUniqueInput {
  id: ID
}

input SponsorWhereInput {
  AND: [SponsorWhereInput!]
  OR: [SponsorWhereInput!]
  NOT: [SponsorWhereInput!]
  id: IDFilter
  title: StringFilter
  link: StringFilter
}

input SponsorOrderByInput {
  id: OrderDirection
  title: OrderDirection
  link: OrderDirection
}

input SponsorUpdateInput {
  title: String
  link: String
}

input SponsorUpdateArgs {
  where: SponsorWhereUniqueInput!
  data: SponsorUpdateInput!
}

input SponsorCreateInput {
  title: String
  link: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  createPlayer(data: PlayerCreateInput!): Player
  createPlayers(data: [PlayerCreateInput!]!): [Player]
  updatePlayer(where: PlayerWhereUniqueInput!, data: PlayerUpdateInput!): Player
  updatePlayers(data: [PlayerUpdateArgs!]!): [Player]
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deletePlayers(where: [PlayerWhereUniqueInput!]!): [Player]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createSponsor(data: SponsorCreateInput!): Sponsor
  createSponsors(data: [SponsorCreateInput!]!): [Sponsor]
  updateSponsor(where: SponsorWhereUniqueInput!, data: SponsorUpdateInput!): Sponsor
  updateSponsors(data: [SponsorUpdateArgs!]!): [Sponsor]
  deleteSponsor(where: SponsorWhereUniqueInput!): Sponsor
  deleteSponsors(where: [SponsorWhereUniqueInput!]!): [Sponsor]
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  teams(where: TeamWhereInput! = {}, orderBy: [TeamOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TeamWhereUniqueInput): [Team!]
  team(where: TeamWhereUniqueInput!): Team
  teamsCount(where: TeamWhereInput! = {}): Int
  players(where: PlayerWhereInput! = {}, orderBy: [PlayerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlayerWhereUniqueInput): [Player!]
  player(where: PlayerWhereUniqueInput!): Player
  playersCount(where: PlayerWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  sponsors(where: SponsorWhereInput! = {}, orderBy: [SponsorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SponsorWhereUniqueInput): [Sponsor!]
  sponsor(where: SponsorWhereUniqueInput!): Sponsor
  sponsorsCount(where: SponsorWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
